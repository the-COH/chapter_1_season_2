/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CollectorInterface extends ethers.utils.Interface {
  functions: {
    "addAsset(address)": FunctionFragment;
    "addHarvestContract(address)": FunctionFragment;
    "allAssetInfos()": FunctionFragment;
    "allAssetProfits()": FunctionFragment;
    "allBalances()": FunctionFragment;
    "asset(address)": FunctionFragment;
    "assets(uint256)": FunctionFragment;
    "beto()": FunctionFragment;
    "burnOrDistribute()": FunctionFragment;
    "buybackBeto()": FunctionFragment;
    "buybackType()": FunctionFragment;
    "chip()": FunctionFragment;
    "collect(address,uint256)": FunctionFragment;
    "distributor()": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvestContracts(uint256)": FunctionFragment;
    "note()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAsset(address)": FunctionFragment;
    "removeHarvestContract(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setBeto(address)": FunctionFragment;
    "setBuybackType(uint8)": FunctionFragment;
    "setDistributor(address)": FunctionFragment;
    "swapAllForNote()": FunctionFragment;
    "swapForNote(address)": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "totalBurnAmount()": FunctionFragment;
    "totalBuybackAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV3Factory()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addHarvestContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allAssetInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allAssetProfits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allBalances",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "asset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "beto", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnOrDistribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buybackBeto",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buybackType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "note", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeHarvestContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "setBeto", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBuybackType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAllForNote",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "swapForNote", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBurnAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBuybackAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Factory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addHarvestContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAssetInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAssetProfits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnOrDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buybackBeto",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buybackType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "note", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeHarvestContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBeto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBuybackType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAllForNote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapForNote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBurnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBuybackAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Factory",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Collector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CollectorInterface;

  functions: {
    addAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addHarvestContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allAssetInfos(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, boolean] & {
          index: BigNumber;
          profit: BigNumber;
          isActive: boolean;
        })[]
      ]
    >;

    allAssetProfits(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { asset: string; profit: BigNumber })[]]
    >;

    allBalances(
      overrides?: CallOverrides
    ): Promise<[([string, BigNumber] & { addr: string; amount: BigNumber })[]]>;

    asset(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        index: BigNumber;
        profit: BigNumber;
        isActive: boolean;
      }
    >;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    beto(overrides?: CallOverrides): Promise<[string]>;

    burnOrDistribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buybackBeto(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buybackType(overrides?: CallOverrides): Promise<[number]>;

    chip(overrides?: CallOverrides): Promise<[string]>;

    collect(
      _asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { collectable: string; isActive: boolean }>;

    note(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeHarvestContract(
      contractId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuybackType(
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAllForNote(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapForNote(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    totalBurnAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBuybackAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;
  };

  addAsset(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addHarvestContract(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allAssetInfos(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, boolean] & {
      index: BigNumber;
      profit: BigNumber;
      isActive: boolean;
    })[]
  >;

  allAssetProfits(
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { asset: string; profit: BigNumber })[]>;

  allBalances(
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { addr: string; amount: BigNumber })[]>;

  asset(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      index: BigNumber;
      profit: BigNumber;
      isActive: boolean;
    }
  >;

  assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  beto(overrides?: CallOverrides): Promise<string>;

  burnOrDistribute(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buybackBeto(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buybackType(overrides?: CallOverrides): Promise<number>;

  chip(overrides?: CallOverrides): Promise<string>;

  collect(
    _asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributor(overrides?: CallOverrides): Promise<string>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { collectable: string; isActive: boolean }>;

  note(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeAsset(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeHarvestContract(
    contractId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setBeto(
    _beto: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuybackType(
    _type: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributor(
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAllForNote(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapForNote(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  totalBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalBuybackAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addAsset(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    addHarvestContract(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allAssetInfos(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, boolean] & {
        index: BigNumber;
        profit: BigNumber;
        isActive: boolean;
      })[]
    >;

    allAssetProfits(
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { asset: string; profit: BigNumber })[]>;

    allBalances(
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { addr: string; amount: BigNumber })[]>;

    asset(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        index: BigNumber;
        profit: BigNumber;
        isActive: boolean;
      }
    >;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    beto(overrides?: CallOverrides): Promise<string>;

    burnOrDistribute(overrides?: CallOverrides): Promise<BigNumber>;

    buybackBeto(overrides?: CallOverrides): Promise<BigNumber>;

    buybackType(overrides?: CallOverrides): Promise<number>;

    chip(overrides?: CallOverrides): Promise<string>;

    collect(
      _asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributor(overrides?: CallOverrides): Promise<string>;

    harvest(overrides?: CallOverrides): Promise<void>;

    harvestContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { collectable: string; isActive: boolean }>;

    note(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeAsset(_asset: string, overrides?: CallOverrides): Promise<void>;

    removeHarvestContract(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setBeto(_beto: string, overrides?: CallOverrides): Promise<void>;

    setBuybackType(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributor(
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAllForNote(overrides?: CallOverrides): Promise<BigNumber>;

    swapForNote(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    totalBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalBuybackAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addHarvestContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allAssetInfos(overrides?: CallOverrides): Promise<BigNumber>;

    allAssetProfits(overrides?: CallOverrides): Promise<BigNumber>;

    allBalances(overrides?: CallOverrides): Promise<BigNumber>;

    asset(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    beto(overrides?: CallOverrides): Promise<BigNumber>;

    burnOrDistribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buybackBeto(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buybackType(overrides?: CallOverrides): Promise<BigNumber>;

    chip(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      _asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    note(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeHarvestContract(
      contractId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuybackType(
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAllForNote(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapForNote(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    totalBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalBuybackAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addHarvestContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allAssetInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allAssetProfits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    asset(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnOrDistribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buybackBeto(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buybackType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collect(
      _asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    note(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeHarvestContract(
      contractId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuybackType(
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAllForNote(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapForNote(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBurnAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBuybackAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
