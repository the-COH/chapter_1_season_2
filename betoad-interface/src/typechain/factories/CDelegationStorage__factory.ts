/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CDelegationStorage,
  CDelegationStorageInterface,
} from "../CDelegationStorage";

const _abi = [
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060ab8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635c60da1b14602d575b600080fd5b600054604c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea2646970667358221220865836a4d31da6a02999efea0392be1dec7d0c169a40e55226ea9c2887e36c1d64736f6c634300080b0033";

export class CDelegationStorage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CDelegationStorage> {
    return super.deploy(overrides || {}) as Promise<CDelegationStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CDelegationStorage {
    return super.attach(address) as CDelegationStorage;
  }
  connect(signer: Signer): CDelegationStorage__factory {
    return super.connect(signer) as CDelegationStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CDelegationStorageInterface {
    return new utils.Interface(_abi) as CDelegationStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CDelegationStorage {
    return new Contract(address, _abi, signerOrProvider) as CDelegationStorage;
  }
}
