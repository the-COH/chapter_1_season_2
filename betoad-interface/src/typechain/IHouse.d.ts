/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IHouseInterface extends ethers.utils.Interface {
  functions: {
    "addShare(address,uint256,uint256,uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "collect()": FunctionFragment;
    "createGame(string,string,string,address)": FunctionFragment;
    "createPool(string,address,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "getCurrentRound()": FunctionFragment;
    "isGameActive(address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "setGameIsActive(uint256,bool)": FunctionFragment;
    "setPoolIsActive(uint256,bool)": FunctionFragment;
    "settle(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addShare",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "collect", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGameActive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setGameIsActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolIsActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGameIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IHouseInterface;

  functions: {
    addShare(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createGame(
      name: string,
      description: string,
      url: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPool(
      name: string,
      asset: string,
      lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    isGameActive(game: string, overrides?: CallOverrides): Promise<[boolean]>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          name: string;
          asset: string;
          assetDecimals: BigNumber;
          deposit: BigNumber;
          lockPeriod: BigNumber;
          price: BigNumber;
          isActive: boolean;
        }
      ]
    >;

    pools(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        asset: string;
        assetDecimals: BigNumber;
        _deposit: BigNumber;
        lockPeriod: BigNumber;
        price: BigNumber;
        isActive: boolean;
      }
    >;

    setGameIsActive(
      gameId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolIsActive(
      poolId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      output: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addShare(
    player: string,
    poolId: BigNumberish,
    gameId: BigNumberish,
    input: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createGame(
    name: string,
    description: string,
    url: string,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPool(
    name: string,
    asset: string,
    lockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

  isGameActive(game: string, overrides?: CallOverrides): Promise<boolean>;

  poolInfo(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      name: string;
      asset: string;
      assetDecimals: BigNumber;
      deposit: BigNumber;
      lockPeriod: BigNumber;
      price: BigNumber;
      isActive: boolean;
    }
  >;

  pools(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      name: string;
      asset: string;
      assetDecimals: BigNumber;
      _deposit: BigNumber;
      lockPeriod: BigNumber;
      price: BigNumber;
      isActive: boolean;
    }
  >;

  setGameIsActive(
    gameId: BigNumberish,
    isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolIsActive(
    poolId: BigNumberish,
    isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    player: string,
    poolId: BigNumberish,
    gameId: BigNumberish,
    input: BigNumberish,
    output: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addShare(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    collect(overrides?: CallOverrides): Promise<void>;

    createGame(
      name: string,
      description: string,
      url: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPool(
      name: string,
      asset: string,
      lockPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          depositAmount: BigNumber;
          claimableRound: BigNumber;
          time: BigNumber;
        },
        BigNumber
      ] & {
        depositInfo: [BigNumber, BigNumber, BigNumber] & {
          depositAmount: BigNumber;
          claimableRound: BigNumber;
          time: BigNumber;
        };
        rewardAmount: BigNumber;
      }
    >;

    getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

    isGameActive(game: string, overrides?: CallOverrides): Promise<boolean>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        asset: string;
        assetDecimals: BigNumber;
        deposit: BigNumber;
        lockPeriod: BigNumber;
        price: BigNumber;
        isActive: boolean;
      }
    >;

    pools(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        asset: string;
        assetDecimals: BigNumber;
        _deposit: BigNumber;
        lockPeriod: BigNumber;
        price: BigNumber;
        isActive: boolean;
      }
    >;

    setGameIsActive(
      gameId: BigNumberish,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, boolean] & {
        name: string;
        description: string;
        url: string;
        creator: string;
        addr: string;
        isActive: boolean;
      }
    >;

    setPoolIsActive(
      poolId: BigNumberish,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        asset: string;
        assetDecimals: BigNumber;
        deposit: BigNumber;
        lockPeriod: BigNumber;
        price: BigNumber;
        isActive: boolean;
      }
    >;

    settle(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      output: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawAmount: BigNumber;
        rewardAmount: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    addShare(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createGame(
      name: string,
      description: string,
      url: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPool(
      name: string,
      asset: string,
      lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

    isGameActive(game: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setGameIsActive(
      gameId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolIsActive(
      poolId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      output: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addShare(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createGame(
      name: string,
      description: string,
      url: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      name: string,
      asset: string,
      lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGameActive(
      game: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGameIsActive(
      gameId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolIsActive(
      poolId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      output: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
