/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DistributorInterface extends ethers.utils.Interface {
  functions: {
    "addDistribution(address,uint8,uint256,uint256)": FunctionFragment;
    "allDestributions()": FunctionFragment;
    "beto()": FunctionFragment;
    "distribute()": FunctionFragment;
    "distributionHistories(uint256,uint256)": FunctionFragment;
    "distributions(uint256)": FunctionFragment;
    "getCurrentRound()": FunctionFragment;
    "lastRoundHeight()": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeDistribution(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setBeto(address)": FunctionFragment;
    "setVesting(address)": FunctionFragment;
    "totalDistributeAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vesting()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDistribution",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allDestributions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "beto", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributionHistories",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRoundHeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "migrate", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBeto", values: [string]): string;
  encodeFunctionData(functionFragment: "setVesting", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalDistributeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vesting", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allDestributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionHistories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRoundHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBeto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVesting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vesting", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Distributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DistributorInterface;

  functions: {
    addDistribution(
      target: string,
      rewardType: BigNumberish,
      key: BigNumberish,
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allDestributions(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, number, BigNumber, BigNumber, BigNumber, boolean] & {
          target: string;
          rewardType: number;
          key: BigNumber;
          ratio: BigNumber;
          totalDistributeAmount: BigNumber;
          isActive: boolean;
        })[]
      ]
    >;

    beto(overrides?: CallOverrides): Promise<[string]>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributionHistories(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber] & {
        target: string;
        rewardType: number;
        amount: BigNumber;
        key: BigNumber;
      }
    >;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber, boolean] & {
        target: string;
        rewardType: number;
        key: BigNumber;
        ratio: BigNumber;
        totalDistributeAmount: BigNumber;
        isActive: boolean;
      }
    >;

    getCurrentRound(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { round: BigNumber }>;

    lastRoundHeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrate(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeDistribution(
      distributionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { distributionAmount: BigNumber }>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVesting(
      _vesting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDistributeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vesting(overrides?: CallOverrides): Promise<[string]>;
  };

  addDistribution(
    target: string,
    rewardType: BigNumberish,
    key: BigNumberish,
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allDestributions(
    overrides?: CallOverrides
  ): Promise<
    ([string, number, BigNumber, BigNumber, BigNumber, boolean] & {
      target: string;
      rewardType: number;
      key: BigNumber;
      ratio: BigNumber;
      totalDistributeAmount: BigNumber;
      isActive: boolean;
    })[]
  >;

  beto(overrides?: CallOverrides): Promise<string>;

  distribute(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributionHistories(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber] & {
      target: string;
      rewardType: number;
      amount: BigNumber;
      key: BigNumber;
    }
  >;

  distributions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, BigNumber, boolean] & {
      target: string;
      rewardType: number;
      key: BigNumber;
      ratio: BigNumber;
      totalDistributeAmount: BigNumber;
      isActive: boolean;
    }
  >;

  getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

  lastRoundHeight(overrides?: CallOverrides): Promise<BigNumber>;

  migrate(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeDistribution(
    distributionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  setBeto(
    _beto: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVesting(
    _vesting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDistributeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vesting(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addDistribution(
      target: string,
      rewardType: BigNumberish,
      key: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allDestributions(
      overrides?: CallOverrides
    ): Promise<
      ([string, number, BigNumber, BigNumber, BigNumber, boolean] & {
        target: string;
        rewardType: number;
        key: BigNumber;
        ratio: BigNumber;
        totalDistributeAmount: BigNumber;
        isActive: boolean;
      })[]
    >;

    beto(overrides?: CallOverrides): Promise<string>;

    distribute(overrides?: CallOverrides): Promise<void>;

    distributionHistories(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber] & {
        target: string;
        rewardType: number;
        amount: BigNumber;
        key: BigNumber;
      }
    >;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber, boolean] & {
        target: string;
        rewardType: number;
        key: BigNumber;
        ratio: BigNumber;
        totalDistributeAmount: BigNumber;
        isActive: boolean;
      }
    >;

    getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

    lastRoundHeight(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(newOwner: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeDistribution(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setBeto(_beto: string, overrides?: CallOverrides): Promise<void>;

    setVesting(_vesting: string, overrides?: CallOverrides): Promise<void>;

    totalDistributeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vesting(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addDistribution(
      target: string,
      rewardType: BigNumberish,
      key: BigNumberish,
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allDestributions(overrides?: CallOverrides): Promise<BigNumber>;

    beto(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributionHistories(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

    lastRoundHeight(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeDistribution(
      distributionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVesting(
      _vesting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDistributeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vesting(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addDistribution(
      target: string,
      rewardType: BigNumberish,
      key: BigNumberish,
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allDestributions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributionHistories(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRoundHeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeDistribution(
      distributionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVesting(
      _vesting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDistributeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vesting(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
