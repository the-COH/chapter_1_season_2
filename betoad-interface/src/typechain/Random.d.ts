/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RandomInterface extends ethers.utils.Interface {
  functions: {
    "addGame(address)": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "feed(uint256,uint256)": FunctionFragment;
    "feedAndSettleAll(uint256,uint256)": FunctionFragment;
    "game(address)": FunctionFragment;
    "gameIndex(address)": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "heightToRandom(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "relayer(address)": FunctionFragment;
    "relayerIndex(address)": FunctionFragment;
    "relayers(uint256)": FunctionFragment;
    "removeGame(address)": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestRandom(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGame", values: [string]): string;
  encodeFunctionData(functionFragment: "addRelayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feedAndSettleAll",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "game", values: [string]): string;
  encodeFunctionData(functionFragment: "gameIndex", values: [string]): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "heightToRandom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "relayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "relayerIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "relayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeGame", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feedAndSettleAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "heightToRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FulfillRandom(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestRandom(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FulfillRandom"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestRandom"): EventFragment;
}

export type FulfillRandomEvent = TypedEvent<
  [BigNumber] & { height: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RequestRandomEvent = TypedEvent<
  [BigNumber] & { height: BigNumber }
>;

export class Random extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RandomInterface;

  functions: {
    addGame(
      _game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feed(
      height: BigNumberish,
      random: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feedAndSettleAll(
      height: BigNumberish,
      random: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    game(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    gameIndex(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    heightToRandom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    relayer(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    relayerIndex(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    relayers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    removeGame(
      _game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRandom(
      height: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addGame(
    _game: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feed(
    height: BigNumberish,
    random: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feedAndSettleAll(
    height: BigNumberish,
    random: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  game(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  gameIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  games(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  heightToRandom(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  relayer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  relayerIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  relayers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  removeGame(
    _game: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRandom(
    height: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGame(_game: string, overrides?: CallOverrides): Promise<void>;

    addRelayer(_relayer: string, overrides?: CallOverrides): Promise<void>;

    feed(
      height: BigNumberish,
      random: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feedAndSettleAll(
      height: BigNumberish,
      random: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    game(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    gameIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    heightToRandom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    relayer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    relayerIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    relayers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    removeGame(_game: string, overrides?: CallOverrides): Promise<void>;

    removeRelayer(_relayer: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestRandom(
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FulfillRandom(uint256)"(
      height?: null
    ): TypedEventFilter<[BigNumber], { height: BigNumber }>;

    FulfillRandom(
      height?: null
    ): TypedEventFilter<[BigNumber], { height: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RequestRandom(uint256)"(
      height?: null
    ): TypedEventFilter<[BigNumber], { height: BigNumber }>;

    RequestRandom(
      height?: null
    ): TypedEventFilter<[BigNumber], { height: BigNumber }>;
  };

  estimateGas: {
    addGame(
      _game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feed(
      height: BigNumberish,
      random: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feedAndSettleAll(
      height: BigNumberish,
      random: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    game(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gameIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    heightToRandom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    relayer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    relayerIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    relayers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    removeGame(
      _game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRandom(
      height: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGame(
      _game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feed(
      height: BigNumberish,
      random: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feedAndSettleAll(
      height: BigNumberish,
      random: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    game(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heightToRandom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeGame(
      _game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRandom(
      height: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
