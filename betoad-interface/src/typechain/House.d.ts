/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HouseInterface extends ethers.utils.Interface {
  functions: {
    "PRECISION()": FunctionFragment;
    "addRound(uint8,uint256,uint256)": FunctionFragment;
    "addShare(address,uint256,uint256,uint256)": FunctionFragment;
    "allDetailPools(address)": FunctionFragment;
    "allGames()": FunctionFragment;
    "allPools()": FunctionFragment;
    "beto()": FunctionFragment;
    "chip()": FunctionFragment;
    "chipBonus()": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimPlayingReward()": FunctionFragment;
    "claimedPlayingReward(address)": FunctionFragment;
    "collect()": FunctionFragment;
    "collector()": FunctionFragment;
    "createGame(string,string,string,address)": FunctionFragment;
    "createPool(string,address,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "deposits(address,uint256)": FunctionFragment;
    "detailPool(uint256,address)": FunctionFragment;
    "distributor()": FunctionFragment;
    "exp(address)": FunctionFragment;
    "gameIndex(address)": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "getCurrentRound()": FunctionFragment;
    "getGameLength()": FunctionFragment;
    "getPoolLength()": FunctionFragment;
    "getTotalPlayingAmountByRound(uint256,uint256)": FunctionFragment;
    "isGameActive()": FunctionFragment;
    "lastClaimRound(address)": FunctionFragment;
    "maxOutputRate()": FunctionFragment;
    "note()": FunctionFragment;
    "owner()": FunctionFragment;
    "playingAmountByRound(address,uint256)": FunctionFragment;
    "playingRewardRatioByRound(uint256)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolRewardRatioByRound(uint256,uint256)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "previewClaim(uint256,address)": FunctionFragment;
    "previewClaimPlayingReward(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewarder()": FunctionFragment;
    "router()": FunctionFragment;
    "setBeto(address)": FunctionFragment;
    "setChipBonus(uint256)": FunctionFragment;
    "setCollector(address)": FunctionFragment;
    "setDistributor(address)": FunctionFragment;
    "setGameIsActive(uint256,bool)": FunctionFragment;
    "setLockPeriod(uint256,uint256)": FunctionFragment;
    "setMaxOutputRate(uint16)": FunctionFragment;
    "setPoolIsActive(uint256,bool)": FunctionFragment;
    "setRewarder(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "settle(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "totalPlayingAmount()": FunctionFragment;
    "totalPlayingAmountByRound(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updatePrice(uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRound",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addShare",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allDetailPools",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "allGames", values?: undefined): string;
  encodeFunctionData(functionFragment: "allPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "beto", values?: undefined): string;
  encodeFunctionData(functionFragment: "chip", values?: undefined): string;
  encodeFunctionData(functionFragment: "chipBonus", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimPlayingReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedPlayingReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "collect", values?: undefined): string;
  encodeFunctionData(functionFragment: "collector", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "detailPool",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exp", values: [string]): string;
  encodeFunctionData(functionFragment: "gameIndex", values: [string]): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPlayingAmountByRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimRound",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxOutputRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "note", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playingAmountByRound",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playingRewardRatioByRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolRewardRatioByRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "previewClaim",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "previewClaimPlayingReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewarder", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "setBeto", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setChipBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameIsActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockPeriod",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxOutputRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolIsActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setRewarder", values: [string]): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPlayingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPlayingAmountByRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allDetailPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allGames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chipBonus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPlayingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedPlayingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collector", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "detailPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPlayingAmountByRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxOutputRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "note", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playingAmountByRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playingRewardRatioByRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolRewardRatioByRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewClaimPlayingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBeto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChipBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxOutputRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPlayingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPlayingAmountByRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class House extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HouseInterface;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRound(
      rewardType: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addShare(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allDetailPools(
      target: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          poolId: BigNumber;
          name: string;
          asset: string;
          deposit: BigNumber;
          balance: BigNumber;
          myDeposit: BigNumber;
          price: BigNumber;
          isActive: boolean;
        })[]
      ]
    >;

    allGames(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, string, string, boolean] & {
          name: string;
          description: string;
          url: string;
          creator: string;
          addr: string;
          isActive: boolean;
        })[]
      ]
    >;

    allPools(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          name: string;
          asset: string;
          assetDecimals: BigNumber;
          deposit: BigNumber;
          lockPeriod: BigNumber;
          price: BigNumber;
          isActive: boolean;
        })[]
      ]
    >;

    beto(overrides?: CallOverrides): Promise<[string]>;

    chip(overrides?: CallOverrides): Promise<[string]>;

    chipBonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPlayingReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimedPlayingReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collector(overrides?: CallOverrides): Promise<[string]>;

    createGame(
      name: string,
      description: string,
      url: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPool(
      name: string,
      _asset: string,
      lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        depositAmount: BigNumber;
        claimableRound: BigNumber;
        time: BigNumber;
      }
    >;

    detailPool(
      poolId: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          poolId: BigNumber;
          name: string;
          asset: string;
          deposit: BigNumber;
          balance: BigNumber;
          myDeposit: BigNumber;
          price: BigNumber;
          isActive: boolean;
        }
      ]
    >;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    exp(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    gameIndex(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, boolean] & {
        name: string;
        description: string;
        url: string;
        creator: string;
        addr: string;
        isActive: boolean;
      }
    >;

    getCurrentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGameLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalPlayingAmountByRound(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "isGameActive()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, string, string, boolean] & {
          name: string;
          description: string;
          url: string;
          creator: string;
          addr: string;
          isActive: boolean;
        })[]
      ]
    >;

    "isGameActive(address)"(
      game: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastClaimRound(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxOutputRate(overrides?: CallOverrides): Promise<[number]>;

    note(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playingAmountByRound(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playingRewardRatioByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          name: string;
          asset: string;
          assetDecimals: BigNumber;
          deposit: BigNumber;
          lockPeriod: BigNumber;
          price: BigNumber;
          isActive: boolean;
        }
      ]
    >;

    poolRewardRatioByRound(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        asset: string;
        assetDecimals: BigNumber;
        deposit: BigNumber;
        lockPeriod: BigNumber;
        price: BigNumber;
        isActive: boolean;
      }
    >;

    previewClaim(
      poolId: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewClaimPlayingReward(
      target: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewarder(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChipBonus(
      _chipBonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollector(
      _collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGameIsActive(
      gameId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockPeriod(
      poolId: BigNumberish,
      newLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxOutputRate(
      _maxOutputRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolIsActive(
      poolId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewarder(
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      output: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalPlayingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPlayingAmountByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updatePrice(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  addRound(
    rewardType: BigNumberish,
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addShare(
    player: string,
    poolId: BigNumberish,
    gameId: BigNumberish,
    input: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allDetailPools(
    target: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      poolId: BigNumber;
      name: string;
      asset: string;
      deposit: BigNumber;
      balance: BigNumber;
      myDeposit: BigNumber;
      price: BigNumber;
      isActive: boolean;
    })[]
  >;

  allGames(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, string, string, boolean] & {
      name: string;
      description: string;
      url: string;
      creator: string;
      addr: string;
      isActive: boolean;
    })[]
  >;

  allPools(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      name: string;
      asset: string;
      assetDecimals: BigNumber;
      deposit: BigNumber;
      lockPeriod: BigNumber;
      price: BigNumber;
      isActive: boolean;
    })[]
  >;

  beto(overrides?: CallOverrides): Promise<string>;

  chip(overrides?: CallOverrides): Promise<string>;

  chipBonus(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPlayingReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimedPlayingReward(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collect(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collector(overrides?: CallOverrides): Promise<string>;

  createGame(
    name: string,
    description: string,
    url: string,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPool(
    name: string,
    _asset: string,
    lockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      depositAmount: BigNumber;
      claimableRound: BigNumber;
      time: BigNumber;
    }
  >;

  detailPool(
    poolId: BigNumberish,
    target: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      poolId: BigNumber;
      name: string;
      asset: string;
      deposit: BigNumber;
      balance: BigNumber;
      myDeposit: BigNumber;
      price: BigNumber;
      isActive: boolean;
    }
  >;

  distributor(overrides?: CallOverrides): Promise<string>;

  exp(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  gameIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  games(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, boolean] & {
      name: string;
      description: string;
      url: string;
      creator: string;
      addr: string;
      isActive: boolean;
    }
  >;

  getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

  getGameLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPlayingAmountByRound(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "isGameActive()"(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, string, string, boolean] & {
      name: string;
      description: string;
      url: string;
      creator: string;
      addr: string;
      isActive: boolean;
    })[]
  >;

  "isGameActive(address)"(
    game: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastClaimRound(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxOutputRate(overrides?: CallOverrides): Promise<number>;

  note(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  playingAmountByRound(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  playingRewardRatioByRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      name: string;
      asset: string;
      assetDecimals: BigNumber;
      deposit: BigNumber;
      lockPeriod: BigNumber;
      price: BigNumber;
      isActive: boolean;
    }
  >;

  poolRewardRatioByRound(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      name: string;
      asset: string;
      assetDecimals: BigNumber;
      deposit: BigNumber;
      lockPeriod: BigNumber;
      price: BigNumber;
      isActive: boolean;
    }
  >;

  previewClaim(
    poolId: BigNumberish,
    target: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewClaimPlayingReward(
    target: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewarder(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  setBeto(
    _beto: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChipBonus(
    _chipBonus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollector(
    _collector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributor(
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGameIsActive(
    gameId: BigNumberish,
    isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockPeriod(
    poolId: BigNumberish,
    newLockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxOutputRate(
    _maxOutputRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolIsActive(
    poolId: BigNumberish,
    isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewarder(
    _rewarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    player: string,
    poolId: BigNumberish,
    gameId: BigNumberish,
    input: BigNumberish,
    output: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalPlayingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalPlayingAmountByRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updatePrice(
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addRound(
      rewardType: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addShare(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allDetailPools(
      target: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        poolId: BigNumber;
        name: string;
        asset: string;
        deposit: BigNumber;
        balance: BigNumber;
        myDeposit: BigNumber;
        price: BigNumber;
        isActive: boolean;
      })[]
    >;

    allGames(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, string, string, boolean] & {
        name: string;
        description: string;
        url: string;
        creator: string;
        addr: string;
        isActive: boolean;
      })[]
    >;

    allPools(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        asset: string;
        assetDecimals: BigNumber;
        deposit: BigNumber;
        lockPeriod: BigNumber;
        price: BigNumber;
        isActive: boolean;
      })[]
    >;

    beto(overrides?: CallOverrides): Promise<string>;

    chip(overrides?: CallOverrides): Promise<string>;

    chipBonus(overrides?: CallOverrides): Promise<BigNumber>;

    claim(poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimPlayingReward(overrides?: CallOverrides): Promise<BigNumber>;

    claimedPlayingReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(overrides?: CallOverrides): Promise<void>;

    collector(overrides?: CallOverrides): Promise<string>;

    createGame(
      name: string,
      description: string,
      url: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPool(
      name: string,
      _asset: string,
      lockPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          depositAmount: BigNumber;
          claimableRound: BigNumber;
          time: BigNumber;
        },
        BigNumber
      ]
    >;

    deposits(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        depositAmount: BigNumber;
        claimableRound: BigNumber;
        time: BigNumber;
      }
    >;

    detailPool(
      poolId: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        poolId: BigNumber;
        name: string;
        asset: string;
        deposit: BigNumber;
        balance: BigNumber;
        myDeposit: BigNumber;
        price: BigNumber;
        isActive: boolean;
      }
    >;

    distributor(overrides?: CallOverrides): Promise<string>;

    exp(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gameIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, boolean] & {
        name: string;
        description: string;
        url: string;
        creator: string;
        addr: string;
        isActive: boolean;
      }
    >;

    getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

    getGameLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPlayingAmountByRound(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "isGameActive()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, string, string, boolean] & {
        name: string;
        description: string;
        url: string;
        creator: string;
        addr: string;
        isActive: boolean;
      })[]
    >;

    "isGameActive(address)"(
      game: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastClaimRound(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxOutputRate(overrides?: CallOverrides): Promise<number>;

    note(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    playingAmountByRound(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playingRewardRatioByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        asset: string;
        assetDecimals: BigNumber;
        deposit: BigNumber;
        lockPeriod: BigNumber;
        price: BigNumber;
        isActive: boolean;
      }
    >;

    poolRewardRatioByRound(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        asset: string;
        assetDecimals: BigNumber;
        deposit: BigNumber;
        lockPeriod: BigNumber;
        price: BigNumber;
        isActive: boolean;
      }
    >;

    previewClaim(
      poolId: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewClaimPlayingReward(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewarder(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    setBeto(_beto: string, overrides?: CallOverrides): Promise<void>;

    setChipBonus(
      _chipBonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollector(_collector: string, overrides?: CallOverrides): Promise<void>;

    setDistributor(
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameIsActive(
      gameId: BigNumberish,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, boolean] & {
        name: string;
        description: string;
        url: string;
        creator: string;
        addr: string;
        isActive: boolean;
      }
    >;

    setLockPeriod(
      poolId: BigNumberish,
      newLockPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxOutputRate(
      _maxOutputRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolIsActive(
      poolId: BigNumberish,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        asset: string;
        assetDecimals: BigNumber;
        deposit: BigNumber;
        lockPeriod: BigNumber;
        price: BigNumber;
        isActive: boolean;
      }
    >;

    setRewarder(_rewarder: string, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    settle(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      output: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalPlayingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalPlayingAmountByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updatePrice(poolId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addRound(
      rewardType: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addShare(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allDetailPools(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allGames(overrides?: CallOverrides): Promise<BigNumber>;

    allPools(overrides?: CallOverrides): Promise<BigNumber>;

    beto(overrides?: CallOverrides): Promise<BigNumber>;

    chip(overrides?: CallOverrides): Promise<BigNumber>;

    chipBonus(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPlayingReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimedPlayingReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collector(overrides?: CallOverrides): Promise<BigNumber>;

    createGame(
      name: string,
      description: string,
      url: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPool(
      name: string,
      _asset: string,
      lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    detailPool(
      poolId: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    exp(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gameIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

    getGameLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPlayingAmountByRound(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isGameActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    "isGameActive(address)"(
      game: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastClaimRound(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxOutputRate(overrides?: CallOverrides): Promise<BigNumber>;

    note(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playingAmountByRound(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playingRewardRatioByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolRewardRatioByRound(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewClaim(
      poolId: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewClaimPlayingReward(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewarder(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChipBonus(
      _chipBonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollector(
      _collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGameIsActive(
      gameId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockPeriod(
      poolId: BigNumberish,
      newLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxOutputRate(
      _maxOutputRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolIsActive(
      poolId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewarder(
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      output: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalPlayingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalPlayingAmountByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updatePrice(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRound(
      rewardType: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addShare(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allDetailPools(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allGames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chipBonus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPlayingReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimedPlayingReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createGame(
      name: string,
      description: string,
      url: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      name: string,
      _asset: string,
      lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    detailPool(
      poolId: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exp(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGameLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPlayingAmountByRound(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGameActive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isGameActive(address)"(
      game: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastClaimRound(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxOutputRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    note(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playingAmountByRound(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playingRewardRatioByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolRewardRatioByRound(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewClaim(
      poolId: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewClaimPlayingReward(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChipBonus(
      _chipBonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollector(
      _collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGameIsActive(
      gameId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockPeriod(
      poolId: BigNumberish,
      newLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxOutputRate(
      _maxOutputRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolIsActive(
      poolId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewarder(
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      player: string,
      poolId: BigNumberish,
      gameId: BigNumberish,
      input: BigNumberish,
      output: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalPlayingAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPlayingAmountByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePrice(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
