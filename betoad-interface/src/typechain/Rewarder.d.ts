/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RewarderInterface extends ethers.utils.Interface {
  functions: {
    "PRECISION()": FunctionFragment;
    "beto()": FunctionFragment;
    "claimReferralReward()": FunctionFragment;
    "collect()": FunctionFragment;
    "collector()": FunctionFragment;
    "distribute(address,uint256)": FunctionFragment;
    "follow(address)": FunctionFragment;
    "followerReferralRewardInfo(address,address)": FunctionFragment;
    "followers(address,uint256)": FunctionFragment;
    "followings(address)": FunctionFragment;
    "house()": FunctionFragment;
    "owner()": FunctionFragment;
    "queryReferralRatio(uint256)": FunctionFragment;
    "referralHistories(address,address)": FunctionFragment;
    "referralRatio(uint256)": FunctionFragment;
    "referrals(address)": FunctionFragment;
    "registerFee()": FunctionFragment;
    "registerReferralAddress(address,string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardRatioByRound(uint256)": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "setBeto(address)": FunctionFragment;
    "setCollector(address)": FunctionFragment;
    "setHouse(address)": FunctionFragment;
    "setReferralRatio(uint256[])": FunctionFragment;
    "setRegisterFee(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "beto", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReferralReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "collect", values?: undefined): string;
  encodeFunctionData(functionFragment: "collector", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "follow", values: [string]): string;
  encodeFunctionData(
    functionFragment: "followerReferralRewardInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "followers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "followings", values: [string]): string;
  encodeFunctionData(functionFragment: "house", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryReferralRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "referralHistories",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "referralRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "referrals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerReferralAddress",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRatioByRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(functionFragment: "setBeto", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCollector",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setHouse", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setReferralRatio",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegisterFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReferralReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collector", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "follow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "followerReferralRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "followers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "followings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "house", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryReferralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralHistories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerReferralAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRatioByRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBeto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHouse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegisterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Rewarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewarderInterface;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    beto(overrides?: CallOverrides): Promise<[string]>;

    claimReferralReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collector(overrides?: CallOverrides): Promise<[string]>;

    distribute(
      user: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    follow(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    followerReferralRewardInfo(
      addr: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<[([string, BigNumber] & { addr: string; amount: BigNumber })[]]>;

    followers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    followings(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    house(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryReferralRatio(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralHistories(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referrals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        name: string;
        description: string;
        isActive: boolean;
      }
    >;

    registerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerReferralAddress(
      target: string,
      name: string,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardRatioByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; claimedAmount: BigNumber }
    >;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollector(
      _collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHouse(
      _house: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferralRatio(
      ratio: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRegisterFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  beto(overrides?: CallOverrides): Promise<string>;

  claimReferralReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collector(overrides?: CallOverrides): Promise<string>;

  distribute(
    user: string,
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  follow(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  followerReferralRewardInfo(
    addr: string,
    target: string,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { addr: string; amount: BigNumber })[]>;

  followers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  followings(arg0: string, overrides?: CallOverrides): Promise<string>;

  house(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  queryReferralRatio(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referralHistories(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referralRatio(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referrals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      name: string;
      description: string;
      isActive: boolean;
    }
  >;

  registerFee(overrides?: CallOverrides): Promise<BigNumber>;

  registerReferralAddress(
    target: string,
    name: string,
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardRatioByRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewards(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; claimedAmount: BigNumber }
  >;

  setBeto(
    _beto: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollector(
    _collector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHouse(
    _house: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferralRatio(
    ratio: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRegisterFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    beto(overrides?: CallOverrides): Promise<string>;

    claimReferralReward(overrides?: CallOverrides): Promise<BigNumber>;

    collect(overrides?: CallOverrides): Promise<void>;

    collector(overrides?: CallOverrides): Promise<string>;

    distribute(
      user: string,
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    follow(target: string, overrides?: CallOverrides): Promise<void>;

    followerReferralRewardInfo(
      addr: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { addr: string; amount: BigNumber })[]>;

    followers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    followings(arg0: string, overrides?: CallOverrides): Promise<string>;

    house(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    queryReferralRatio(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralHistories(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        name: string;
        description: string;
        isActive: boolean;
      }
    >;

    registerFee(overrides?: CallOverrides): Promise<BigNumber>;

    registerReferralAddress(
      target: string,
      name: string,
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardRatioByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; claimedAmount: BigNumber }
    >;

    setBeto(_beto: string, overrides?: CallOverrides): Promise<void>;

    setCollector(_collector: string, overrides?: CallOverrides): Promise<void>;

    setHouse(_house: string, overrides?: CallOverrides): Promise<void>;

    setReferralRatio(
      ratio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRegisterFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    beto(overrides?: CallOverrides): Promise<BigNumber>;

    claimReferralReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collector(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      user: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    follow(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    followerReferralRewardInfo(
      addr: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    followers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    followings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    house(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryReferralRatio(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralHistories(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerFee(overrides?: CallOverrides): Promise<BigNumber>;

    registerReferralAddress(
      target: string,
      name: string,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardRatioByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollector(
      _collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHouse(
      _house: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferralRatio(
      ratio: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRegisterFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReferralReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      user: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    follow(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    followerReferralRewardInfo(
      addr: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    followers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    followings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    house(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryReferralRatio(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralHistories(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referrals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerReferralAddress(
      target: string,
      name: string,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardRatioByRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBeto(
      _beto: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollector(
      _collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHouse(
      _house: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferralRatio(
      ratio: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRegisterFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
